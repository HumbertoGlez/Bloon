# Generated from Bloon.g4 by ANTLR 4.9.2
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


from BloonCompiler import Compiler
compi = Compiler()
quad_queue = None
meth_dir = None
class_dir = None
constants = None



def serializedATN():
    with StringIO() as buf:
        buf.write("\3\u608b\ua72a\u8133\ub9ed\u417c\u3be7\u7786\u5964\2=")
        buf.write("\u017e\b\1\4\2\t\2\4\3\t\3\4\4\t\4\4\5\t\5\4\6\t\6\4\7")
        buf.write("\t\7\4\b\t\b\4\t\t\t\4\n\t\n\4\13\t\13\4\f\t\f\4\r\t\r")
        buf.write("\4\16\t\16\4\17\t\17\4\20\t\20\4\21\t\21\4\22\t\22\4\23")
        buf.write("\t\23\4\24\t\24\4\25\t\25\4\26\t\26\4\27\t\27\4\30\t\30")
        buf.write("\4\31\t\31\4\32\t\32\4\33\t\33\4\34\t\34\4\35\t\35\4\36")
        buf.write("\t\36\4\37\t\37\4 \t \4!\t!\4\"\t\"\4#\t#\4$\t$\4%\t%")
        buf.write("\4&\t&\4\'\t\'\4(\t(\4)\t)\4*\t*\4+\t+\4,\t,\4-\t-\4.")
        buf.write("\t.\4/\t/\4\60\t\60\4\61\t\61\4\62\t\62\4\63\t\63\4\64")
        buf.write("\t\64\4\65\t\65\4\66\t\66\4\67\t\67\48\t8\49\t9\4:\t:")
        buf.write("\4;\t;\4<\t<\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\2\3\3\3\3\3")
        buf.write("\4\3\4\3\4\3\4\3\4\3\5\3\5\3\6\3\6\3\7\3\7\3\7\3\7\3\7")
        buf.write("\3\7\3\b\3\b\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\t\3\n\3")
        buf.write("\n\3\13\3\13\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3\f\3")
        buf.write("\f\3\r\3\r\3\16\3\16\3\17\3\17\3\20\3\20\3\21\3\21\3\21")
        buf.write("\3\21\3\21\3\21\3\21\3\21\3\22\3\22\3\23\3\23\3\23\3\23")
        buf.write("\3\23\3\24\3\24\3\25\3\25\3\25\3\25\3\25\3\26\3\26\3\27")
        buf.write("\3\27\3\27\3\27\3\30\3\30\3\30\3\30\3\30\3\30\3\31\3\31")
        buf.write("\3\31\3\31\3\31\3\32\3\32\3\32\3\32\3\32\3\32\3\32\3\33")
        buf.write("\3\33\3\33\3\34\3\34\3\34\3\35\3\35\3\35\3\36\3\36\3\36")
        buf.write("\3\37\3\37\3\37\3\37\3\37\3 \3 \3 \3 \3 \3 \3 \3!\3!\3")
        buf.write("!\3!\3!\3\"\3\"\3\"\3\"\3\"\3\"\3#\3#\3#\3#\3#\3$\3$\3")
        buf.write("$\3$\3$\3%\3%\3%\3%\3%\3&\3&\3&\3&\3&\3&\3\'\3\'\3\'\3")
        buf.write("(\3(\3(\3(\3(\3(\3)\3)\3)\3*\3*\3+\3+\3+\3+\3,\3,\3,\3")
        buf.write("-\3-\3-\3.\3.\3.\3/\3/\3/\3\60\3\60\3\60\3\61\3\61\3\62")
        buf.write("\3\62\3\63\3\63\3\64\3\64\3\65\3\65\3\66\3\66\7\66\u0148")
        buf.write("\n\66\f\66\16\66\u014b\13\66\3\67\3\67\7\67\u014f\n\67")
        buf.write("\f\67\16\67\u0152\13\67\3\67\5\67\u0155\n\67\38\38\78")
        buf.write("\u0159\n8\f8\168\u015c\138\38\58\u015f\n8\38\38\38\68")
        buf.write("\u0164\n8\r8\168\u0165\39\39\79\u016a\n9\f9\169\u016d")
        buf.write("\139\39\39\3:\3:\3:\3:\3;\6;\u0176\n;\r;\16;\u0177\3;")
        buf.write("\3;\3<\3<\3<\3\u016b\2=\3\3\5\4\7\5\t\6\13\7\r\b\17\t")
        buf.write("\21\n\23\13\25\f\27\r\31\16\33\17\35\20\37\21!\22#\23")
        buf.write("%\24\'\25)\26+\27-\30/\31\61\32\63\33\65\34\67\359\36")
        buf.write(";\37= ?!A\"C#E$G%I&K\'M(O)Q*S+U,W-Y.[/]\60_\61a\62c\63")
        buf.write("e\64g\65i\66k\67m8o9q:s;u<w=\3\2\13\5\2C\\aac|\6\2\62")
        buf.write(";C\\aac|\3\2\63;\3\2\62;\3\2\62\62\3\2\60\60\3\2$$\3\2")
        buf.write("))\5\2\13\f\17\17\"\"\2\u0185\2\3\3\2\2\2\2\5\3\2\2\2")
        buf.write("\2\7\3\2\2\2\2\t\3\2\2\2\2\13\3\2\2\2\2\r\3\2\2\2\2\17")
        buf.write("\3\2\2\2\2\21\3\2\2\2\2\23\3\2\2\2\2\25\3\2\2\2\2\27\3")
        buf.write("\2\2\2\2\31\3\2\2\2\2\33\3\2\2\2\2\35\3\2\2\2\2\37\3\2")
        buf.write("\2\2\2!\3\2\2\2\2#\3\2\2\2\2%\3\2\2\2\2\'\3\2\2\2\2)\3")
        buf.write("\2\2\2\2+\3\2\2\2\2-\3\2\2\2\2/\3\2\2\2\2\61\3\2\2\2\2")
        buf.write("\63\3\2\2\2\2\65\3\2\2\2\2\67\3\2\2\2\29\3\2\2\2\2;\3")
        buf.write("\2\2\2\2=\3\2\2\2\2?\3\2\2\2\2A\3\2\2\2\2C\3\2\2\2\2E")
        buf.write("\3\2\2\2\2G\3\2\2\2\2I\3\2\2\2\2K\3\2\2\2\2M\3\2\2\2\2")
        buf.write("O\3\2\2\2\2Q\3\2\2\2\2S\3\2\2\2\2U\3\2\2\2\2W\3\2\2\2")
        buf.write("\2Y\3\2\2\2\2[\3\2\2\2\2]\3\2\2\2\2_\3\2\2\2\2a\3\2\2")
        buf.write("\2\2c\3\2\2\2\2e\3\2\2\2\2g\3\2\2\2\2i\3\2\2\2\2k\3\2")
        buf.write("\2\2\2m\3\2\2\2\2o\3\2\2\2\2q\3\2\2\2\2s\3\2\2\2\2u\3")
        buf.write("\2\2\2\2w\3\2\2\2\3y\3\2\2\2\5\u0081\3\2\2\2\7\u0083\3")
        buf.write("\2\2\2\t\u0088\3\2\2\2\13\u008a\3\2\2\2\r\u008c\3\2\2")
        buf.write("\2\17\u0092\3\2\2\2\21\u0094\3\2\2\2\23\u009d\3\2\2\2")
        buf.write("\25\u009f\3\2\2\2\27\u00a1\3\2\2\2\31\u00ac\3\2\2\2\33")
        buf.write("\u00ae\3\2\2\2\35\u00b0\3\2\2\2\37\u00b2\3\2\2\2!\u00b4")
        buf.write("\3\2\2\2#\u00bc\3\2\2\2%\u00be\3\2\2\2\'\u00c3\3\2\2\2")
        buf.write(")\u00c5\3\2\2\2+\u00ca\3\2\2\2-\u00cc\3\2\2\2/\u00d0\3")
        buf.write("\2\2\2\61\u00d6\3\2\2\2\63\u00db\3\2\2\2\65\u00e2\3\2")
        buf.write("\2\2\67\u00e5\3\2\2\29\u00e8\3\2\2\2;\u00eb\3\2\2\2=\u00ee")
        buf.write("\3\2\2\2?\u00f3\3\2\2\2A\u00fa\3\2\2\2C\u00ff\3\2\2\2")
        buf.write("E\u0105\3\2\2\2G\u010a\3\2\2\2I\u010f\3\2\2\2K\u0114\3")
        buf.write("\2\2\2M\u011a\3\2\2\2O\u011d\3\2\2\2Q\u0123\3\2\2\2S\u0126")
        buf.write("\3\2\2\2U\u0128\3\2\2\2W\u012c\3\2\2\2Y\u012f\3\2\2\2")
        buf.write("[\u0132\3\2\2\2]\u0135\3\2\2\2_\u0138\3\2\2\2a\u013b\3")
        buf.write("\2\2\2c\u013d\3\2\2\2e\u013f\3\2\2\2g\u0141\3\2\2\2i\u0143")
        buf.write("\3\2\2\2k\u0145\3\2\2\2m\u0154\3\2\2\2o\u015e\3\2\2\2")
        buf.write("q\u0167\3\2\2\2s\u0170\3\2\2\2u\u0175\3\2\2\2w\u017b\3")
        buf.write("\2\2\2yz\7r\2\2z{\7t\2\2{|\7q\2\2|}\7i\2\2}~\7t\2\2~\177")
        buf.write("\7c\2\2\177\u0080\7o\2\2\u0080\4\3\2\2\2\u0081\u0082\7")
        buf.write("=\2\2\u0082\6\3\2\2\2\u0083\u0084\7o\2\2\u0084\u0085\7")
        buf.write("c\2\2\u0085\u0086\7k\2\2\u0086\u0087\7p\2\2\u0087\b\3")
        buf.write("\2\2\2\u0088\u0089\7*\2\2\u0089\n\3\2\2\2\u008a\u008b")
        buf.write("\7+\2\2\u008b\f\3\2\2\2\u008c\u008d\7e\2\2\u008d\u008e")
        buf.write("\7n\2\2\u008e\u008f\7c\2\2\u008f\u0090\7u\2\2\u0090\u0091")
        buf.write("\7u\2\2\u0091\16\3\2\2\2\u0092\u0093\7>\2\2\u0093\20\3")
        buf.write("\2\2\2\u0094\u0095\7k\2\2\u0095\u0096\7p\2\2\u0096\u0097")
        buf.write("\7j\2\2\u0097\u0098\7g\2\2\u0098\u0099\7t\2\2\u0099\u009a")
        buf.write("\7k\2\2\u009a\u009b\7v\2\2\u009b\u009c\7u\2\2\u009c\22")
        buf.write("\3\2\2\2\u009d\u009e\7@\2\2\u009e\24\3\2\2\2\u009f\u00a0")
        buf.write("\7}\2\2\u00a0\26\3\2\2\2\u00a1\u00a2\7c\2\2\u00a2\u00a3")
        buf.write("\7v\2\2\u00a3\u00a4\7v\2\2\u00a4\u00a5\7t\2\2\u00a5\u00a6")
        buf.write("\7k\2\2\u00a6\u00a7\7d\2\2\u00a7\u00a8\7w\2\2\u00a8\u00a9")
        buf.write("\7v\2\2\u00a9\u00aa\7g\2\2\u00aa\u00ab\7u\2\2\u00ab\30")
        buf.write("\3\2\2\2\u00ac\u00ad\7<\2\2\u00ad\32\3\2\2\2\u00ae\u00af")
        buf.write("\7]\2\2\u00af\34\3\2\2\2\u00b0\u00b1\7.\2\2\u00b1\36\3")
        buf.write("\2\2\2\u00b2\u00b3\7_\2\2\u00b3 \3\2\2\2\u00b4\u00b5\7")
        buf.write("o\2\2\u00b5\u00b6\7g\2\2\u00b6\u00b7\7v\2\2\u00b7\u00b8")
        buf.write("\7j\2\2\u00b8\u00b9\7q\2\2\u00b9\u00ba\7f\2\2\u00ba\u00bb")
        buf.write("\7u\2\2\u00bb\"\3\2\2\2\u00bc\u00bd\7\177\2\2\u00bd$\3")
        buf.write("\2\2\2\u00be\u00bf\7o\2\2\u00bf\u00c0\7g\2\2\u00c0\u00c1")
        buf.write("\7v\2\2\u00c1\u00c2\7j\2\2\u00c2&\3\2\2\2\u00c3\u00c4")
        buf.write("\7\60\2\2\u00c4(\3\2\2\2\u00c5\u00c6\7x\2\2\u00c6\u00c7")
        buf.write("\7c\2\2\u00c7\u00c8\7t\2\2\u00c8\u00c9\7u\2\2\u00c9*\3")
        buf.write("\2\2\2\u00ca\u00cb\7?\2\2\u00cb,\3\2\2\2\u00cc\u00cd\7")
        buf.write("k\2\2\u00cd\u00ce\7p\2\2\u00ce\u00cf\7v\2\2\u00cf.\3\2")
        buf.write("\2\2\u00d0\u00d1\7h\2\2\u00d1\u00d2\7n\2\2\u00d2\u00d3")
        buf.write("\7q\2\2\u00d3\u00d4\7c\2\2\u00d4\u00d5\7v\2\2\u00d5\60")
        buf.write("\3\2\2\2\u00d6\u00d7\7e\2\2\u00d7\u00d8\7j\2\2\u00d8\u00d9")
        buf.write("\7c\2\2\u00d9\u00da\7t\2\2\u00da\62\3\2\2\2\u00db\u00dc")
        buf.write("\7u\2\2\u00dc\u00dd\7v\2\2\u00dd\u00de\7t\2\2\u00de\u00df")
        buf.write("\7k\2\2\u00df\u00e0\7p\2\2\u00e0\u00e1\7i\2\2\u00e1\64")
        buf.write("\3\2\2\2\u00e2\u00e3\7-\2\2\u00e3\u00e4\7?\2\2\u00e4\66")
        buf.write("\3\2\2\2\u00e5\u00e6\7/\2\2\u00e6\u00e7\7?\2\2\u00e78")
        buf.write("\3\2\2\2\u00e8\u00e9\7,\2\2\u00e9\u00ea\7?\2\2\u00ea:")
        buf.write("\3\2\2\2\u00eb\u00ec\7\61\2\2\u00ec\u00ed\7?\2\2\u00ed")
        buf.write("<\3\2\2\2\u00ee\u00ef\7x\2\2\u00ef\u00f0\7q\2\2\u00f0")
        buf.write("\u00f1\7k\2\2\u00f1\u00f2\7f\2\2\u00f2>\3\2\2\2\u00f3")
        buf.write("\u00f4\7t\2\2\u00f4\u00f5\7g\2\2\u00f5\u00f6\7v\2\2\u00f6")
        buf.write("\u00f7\7w\2\2\u00f7\u00f8\7t\2\2\u00f8\u00f9\7p\2\2\u00f9")
        buf.write("@\3\2\2\2\u00fa\u00fb\7t\2\2\u00fb\u00fc\7g\2\2\u00fc")
        buf.write("\u00fd\7c\2\2\u00fd\u00fe\7f\2\2\u00feB\3\2\2\2\u00ff")
        buf.write("\u0100\7y\2\2\u0100\u0101\7t\2\2\u0101\u0102\7k\2\2\u0102")
        buf.write("\u0103\7v\2\2\u0103\u0104\7g\2\2\u0104D\3\2\2\2\u0105")
        buf.write("\u0106\7e\2\2\u0106\u0107\7q\2\2\u0107\u0108\7p\2\2\u0108")
        buf.write("\u0109\7f\2\2\u0109F\3\2\2\2\u010a\u010b\7v\2\2\u010b")
        buf.write("\u010c\7j\2\2\u010c\u010d\7g\2\2\u010d\u010e\7p\2\2\u010e")
        buf.write("H\3\2\2\2\u010f\u0110\7g\2\2\u0110\u0111\7n\2\2\u0111")
        buf.write("\u0112\7u\2\2\u0112\u0113\7g\2\2\u0113J\3\2\2\2\u0114")
        buf.write("\u0115\7y\2\2\u0115\u0116\7j\2\2\u0116\u0117\7k\2\2\u0117")
        buf.write("\u0118\7n\2\2\u0118\u0119\7g\2\2\u0119L\3\2\2\2\u011a")
        buf.write("\u011b\7f\2\2\u011b\u011c\7q\2\2\u011cN\3\2\2\2\u011d")
        buf.write("\u011e\7h\2\2\u011e\u011f\7n\2\2\u011f\u0120\7q\2\2\u0120")
        buf.write("\u0121\7q\2\2\u0121\u0122\7r\2\2\u0122P\3\2\2\2\u0123")
        buf.write("\u0124\7v\2\2\u0124\u0125\7q\2\2\u0125R\3\2\2\2\u0126")
        buf.write("\u0127\7#\2\2\u0127T\3\2\2\2\u0128\u0129\7c\2\2\u0129")
        buf.write("\u012a\7p\2\2\u012a\u012b\7f\2\2\u012bV\3\2\2\2\u012c")
        buf.write("\u012d\7q\2\2\u012d\u012e\7t\2\2\u012eX\3\2\2\2\u012f")
        buf.write("\u0130\7@\2\2\u0130\u0131\7?\2\2\u0131Z\3\2\2\2\u0132")
        buf.write("\u0133\7>\2\2\u0133\u0134\7?\2\2\u0134\\\3\2\2\2\u0135")
        buf.write("\u0136\7?\2\2\u0136\u0137\7?\2\2\u0137^\3\2\2\2\u0138")
        buf.write("\u0139\7#\2\2\u0139\u013a\7?\2\2\u013a`\3\2\2\2\u013b")
        buf.write("\u013c\7-\2\2\u013cb\3\2\2\2\u013d\u013e\7/\2\2\u013e")
        buf.write("d\3\2\2\2\u013f\u0140\7,\2\2\u0140f\3\2\2\2\u0141\u0142")
        buf.write("\7\61\2\2\u0142h\3\2\2\2\u0143\u0144\7\'\2\2\u0144j\3")
        buf.write("\2\2\2\u0145\u0149\t\2\2\2\u0146\u0148\t\3\2\2\u0147\u0146")
        buf.write("\3\2\2\2\u0148\u014b\3\2\2\2\u0149\u0147\3\2\2\2\u0149")
        buf.write("\u014a\3\2\2\2\u014al\3\2\2\2\u014b\u0149\3\2\2\2\u014c")
        buf.write("\u0150\t\4\2\2\u014d\u014f\t\5\2\2\u014e\u014d\3\2\2\2")
        buf.write("\u014f\u0152\3\2\2\2\u0150\u014e\3\2\2\2\u0150\u0151\3")
        buf.write("\2\2\2\u0151\u0155\3\2\2\2\u0152\u0150\3\2\2\2\u0153\u0155")
        buf.write("\t\6\2\2\u0154\u014c\3\2\2\2\u0154\u0153\3\2\2\2\u0155")
        buf.write("n\3\2\2\2\u0156\u015a\t\4\2\2\u0157\u0159\t\5\2\2\u0158")
        buf.write("\u0157\3\2\2\2\u0159\u015c\3\2\2\2\u015a\u0158\3\2\2\2")
        buf.write("\u015a\u015b\3\2\2\2\u015b\u015f\3\2\2\2\u015c\u015a\3")
        buf.write("\2\2\2\u015d\u015f\t\6\2\2\u015e\u0156\3\2\2\2\u015e\u015d")
        buf.write("\3\2\2\2\u015f\u0160\3\2\2\2\u0160\u0161\t\7\2\2\u0161")
        buf.write("\u0163\3\2\2\2\u0162\u0164\t\5\2\2\u0163\u0162\3\2\2\2")
        buf.write("\u0164\u0165\3\2\2\2\u0165\u0163\3\2\2\2\u0165\u0166\3")
        buf.write("\2\2\2\u0166p\3\2\2\2\u0167\u016b\t\b\2\2\u0168\u016a")
        buf.write("\13\2\2\2\u0169\u0168\3\2\2\2\u016a\u016d\3\2\2\2\u016b")
        buf.write("\u016c\3\2\2\2\u016b\u0169\3\2\2\2\u016c\u016e\3\2\2\2")
        buf.write("\u016d\u016b\3\2\2\2\u016e\u016f\t\b\2\2\u016fr\3\2\2")
        buf.write("\2\u0170\u0171\t\t\2\2\u0171\u0172\13\2\2\2\u0172\u0173")
        buf.write("\t\t\2\2\u0173t\3\2\2\2\u0174\u0176\t\n\2\2\u0175\u0174")
        buf.write("\3\2\2\2\u0176\u0177\3\2\2\2\u0177\u0175\3\2\2\2\u0177")
        buf.write("\u0178\3\2\2\2\u0178\u0179\3\2\2\2\u0179\u017a\b;\2\2")
        buf.write("\u017av\3\2\2\2\u017b\u017c\7^\2\2\u017c\u017d\7e\2\2")
        buf.write("\u017dx\3\2\2\2\f\2\u0147\u0149\u0150\u0154\u015a\u015e")
        buf.write("\u0165\u016b\u0177\3\b\2\2")
        return buf.getvalue()


class BloonLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    T__0 = 1
    T__1 = 2
    T__2 = 3
    T__3 = 4
    T__4 = 5
    T__5 = 6
    T__6 = 7
    T__7 = 8
    T__8 = 9
    T__9 = 10
    T__10 = 11
    T__11 = 12
    T__12 = 13
    T__13 = 14
    T__14 = 15
    T__15 = 16
    T__16 = 17
    T__17 = 18
    T__18 = 19
    T__19 = 20
    T__20 = 21
    T__21 = 22
    T__22 = 23
    T__23 = 24
    T__24 = 25
    T__25 = 26
    T__26 = 27
    T__27 = 28
    T__28 = 29
    T__29 = 30
    T__30 = 31
    T__31 = 32
    T__32 = 33
    T__33 = 34
    T__34 = 35
    T__35 = 36
    T__36 = 37
    T__37 = 38
    T__38 = 39
    T__39 = 40
    T__40 = 41
    T__41 = 42
    T__42 = 43
    T__43 = 44
    T__44 = 45
    T__45 = 46
    T__46 = 47
    T__47 = 48
    T__48 = 49
    T__49 = 50
    T__50 = 51
    T__51 = 52
    ID = 53
    CONST_INT = 54
    CONST_FLOAT = 55
    CONST_STR = 56
    CONST_CHAR = 57
    WHITESPACE = 58
    CONTINUE = 59

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN" ]

    modeNames = [ "DEFAULT_MODE" ]

    literalNames = [ "<INVALID>",
            "'program'", "';'", "'main'", "'('", "')'", "'class'", "'<'", 
            "'inherits'", "'>'", "'{'", "'attributes'", "':'", "'['", "','", 
            "']'", "'methods'", "'}'", "'meth'", "'.'", "'vars'", "'='", 
            "'int'", "'float'", "'char'", "'string'", "'+='", "'-='", "'*='", 
            "'/='", "'void'", "'return'", "'read'", "'write'", "'cond'", 
            "'then'", "'else'", "'while'", "'do'", "'floop'", "'to'", "'!'", 
            "'and'", "'or'", "'>='", "'<='", "'=='", "'!='", "'+'", "'-'", 
            "'*'", "'/'", "'%'", "'\\c'" ]

    symbolicNames = [ "<INVALID>",
            "ID", "CONST_INT", "CONST_FLOAT", "CONST_STR", "CONST_CHAR", 
            "WHITESPACE", "CONTINUE" ]

    ruleNames = [ "T__0", "T__1", "T__2", "T__3", "T__4", "T__5", "T__6", 
                  "T__7", "T__8", "T__9", "T__10", "T__11", "T__12", "T__13", 
                  "T__14", "T__15", "T__16", "T__17", "T__18", "T__19", 
                  "T__20", "T__21", "T__22", "T__23", "T__24", "T__25", 
                  "T__26", "T__27", "T__28", "T__29", "T__30", "T__31", 
                  "T__32", "T__33", "T__34", "T__35", "T__36", "T__37", 
                  "T__38", "T__39", "T__40", "T__41", "T__42", "T__43", 
                  "T__44", "T__45", "T__46", "T__47", "T__48", "T__49", 
                  "T__50", "T__51", "ID", "CONST_INT", "CONST_FLOAT", "CONST_STR", 
                  "CONST_CHAR", "WHITESPACE", "CONTINUE" ]

    grammarFileName = "Bloon.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.9.2")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


